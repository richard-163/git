# 按照完成后设置用户名和邮箱
$ git config --global user.name "richard"
$ git config --global user.email "test@qq.com"

#查看所有配置 $ git config --list

# 初始化git仓库 $ git init

#添加文件到git仓库，分两步
$ git add <file> （将工作区的文件修改添加到暂存区）
$ git commit -m <message> （将暂存区的所有内容添加到当前分支）

#查看工作区状态 $git status
#查看修改内容 $git diff

# 查看git提交日志记录 $ git log
# 回退到上一版本 $ git reset --hard HEAD^
# 回退到某个版本 $ git reset --hard 18690aa(commit id前几位)
# 查看git命令日志记录 $ git reflog

# Git的版本库里有一个称为stage（或者叫index）的暂存区，还有第一个分支master，以及指向master的一个HEAD指针
场景1：修改了工作区文件的内容，想撤回修改时，用命令git checkout -- file。（让文件回到最近一次git commit时的状态）；
场景2：修改了暂存区文件的内容，想撤回修改时，用命令git checkout -- file。（让文件回到最近一次git add时的状态）；
场景3：修改了工作区文件的内容，且添加到了暂存区时，想撤回修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
# 要随时掌握工作区的状态，使用git status命令。
# 如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

#从git仓库中删除文件，分两步：
$ git delete <file>
$ git commit -m <message>

# 恢复删除的文件 
1)直接从文件管理器删除，恢复命令：$ git checkout -- <file>
2)通过git rm命令删除，恢复命令：git reset --hard "commit id"


远程仓库
# 在本地仓库添加一个远程仓库（远程库默认名为origin，也可自己命名）
$ git remote add origin git@github.com:richard-163/repo-name.git
# 将本地master分支跟踪到远程分支
$ git push -u origin master

#查看配置有哪些远程仓库
$ git remote
#查看具体某个远程仓库信息
$ git remote show origin

# 远程仓库克隆到本地（要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。）
$ git clone git@github.com:richard-163/gitskills.git
# Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议，但通过ssh支持的原生git协议速度最快。

# 分支管理
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。

通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

# bug分支
每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
Git提供了一个stash功能，可以把当前工作现场“储藏”起来，等解决bug后恢复现场继续工作：$ git stash
假定需要在master分支上修复，就从master创建临时分支：
$ git checkout master
$ git checkout -b issue-101
修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：
$ git checkout master
$ git merge --no-ff -m "merged bug fix 101" issue-101
bug修复后，回到dev分支接着干活：
$ git checkout dev
通过$ git status查看工作区是干净的，用git stash list命令查看刚才的工作现场存，恢复工作现场有两个办法：
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了。

# Feature分支
每添加一个新功能时，不希望因为一些实验性质的代码，把主分支搞乱了，所以最好新建一个feature分支，在上面开发，完成后合并，最后删除该分支。
例如，开发代号为Vulcan的新功能：
$ git checkout -b feature-vulcan
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

# 多人协作
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

rebase操作可以把本地未push的分叉提交历史整理成直线；
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。

# 标签
命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
命令git tag可以查看所有标签。

命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

# github
在GitHub上，可以任意Fork开源仓库；
自己拥有Fork后的仓库的读写权限；
可以推送pull request给官方仓库来贡献代码。

使用GitHub时，国内的用户经常遇到的问题是访问速度太慢，可以使用国内的Git托管服务——码云（gitee.com）。
和GitHub相比，码云也提供免费的Git仓库，还集成了代码质量检测、项目演示等功能。
对于团队协作开发，码云还提供了项目管理、代码托管、文档管理的服务，5人以下小团队免费。


# 搭建Git服务器
搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。
假设你已经有sudo权限的用户账号，下面，正式开始安装。

第一步，安装git：
$ sudo apt-get install git

第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git

第三步，创建证书登录：
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
$ sudo chown -R git:git sample.git

第五步，禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

第六步，克隆远程仓库：
现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
$ git clone git@server:/srv/sample.git

剩下的推送就简单了。
